2015-04-02  Vasily Tarasov  <tarasov@vasily.name>

	Switching package version to 0.9.4 and updating build scripts
	We use auto-tools from CentOS 6.4 for builds.

2015-04-02  Xing Lin  <xinglin@cs.utah.edu>

	Added SHA1 support

	Fix in cmpr_method enumeration

2014-08-27  Sonam Mandal  <sonam.dp42@gmail.com>

	Updating scan-fsl-multi.sh to pick up traces for Fall 2014.

2014-08-06  Vasily Tarasov  <tarasov@vasily.name>

	Updating snapshot validation script to detect interrupted runs
	Also updating diagrams generated by this script.

2014-06-16  Sonam Mandal  <sonam.dp42@gmail.com>

	Added archiving script for FSL Homes dataset.

2014-06-06  Vasily Tarasov  <tarasov@vasily.name>

	fslhome -> fslhomes and creting symlinks

	Adding availability diagrams for all years

	Tuples are immutable in python, so switching to lists.

2014-05-31  Vasily Tarasov  <tarasov@vasily.name>

	Adding hf-verify invocation to the verification script

2014-05-23  Sonam Mandal  <sonam.dp42@gmail.com>

	Modified scripts/scan-fsl-multi.sh for the summer session.

2014-05-21  Vasily Tarasov  <tarasov@vasily.name>

	Re-alignign the paragraphs.

	Adding a sentence about file extensions

	Clarifying that we talk about other chunk hashes, not some other hashes

	Minor missprint in the Fslhomes README

2014-05-20  Erez Zadok  <ezk@cs.sunysb.edu>

	review README-fslhomes

2014-05-19  Vasily Tarasov  <tarasov@vasily.name>

	Adding dataset summary spreadsheet from gdocs

	Adding directories and user lists for 2011, 2013, and 2014

	Taking destination directory as a command line argument

	Zero-pading mangled usernames

	Minor updates to fslhomes README

2014-05-17  Vasily Tarasov  <tarasov@vasily.name>

	Scripts for verifying and visualizing fslhomes snapshot coverage

	Adding a README for Fslhomes dataset

	Moving README-macos to packaging/ directory

2014-04-21  Vasily Tarasov  <tarasov@vasily.name>

	Bringing ChangeLog up-to-date.

	Updating NEWS file with 0.9.3 changes.

	Updating version to 0.9.3

	Adding one point to TODO.

2014-04-14  Vasily Tarasov  <tarasov@vasily.name>

	Merge branch 'master' of git.fsl.cs.sunysb.edu:/scm/fslgit/fs-hasher

	Adding update-readme script

	Updating README-macos

2014-04-01  Sonam Mandal  <sonam.dp42@gmail.com>

	Modified archive.pl script to take fs-hasher directory instead of anonymizer path. Modified it to also skip creating packages if they already exist.

2014-03-29  Sonam Mandal  <sonam.dp42@gmail.com>

	Minor fix in archive.pl for output directory

2014-03-28  Vasily Tarasov  <tarasov@vasily.name>

	Merge branch 'master' of git.fsl.cs.sunysb.edu:/scm/fslgit/fs-hasher

	Adding a simple verifier for hash files.

2014-03-24  Sonam Mandal  <sonam.dp42@gmail.com>

	Modified archive.pl to generate SHA1SUM file for each package.

2014-03-21  Sonam Mandal  <sonam.dp42@gmail.com>

	Removed extra space from archive.pl for generating README. Added new URL to README.

	Modified archive.pl script to print snapshot filename properly in README.

2014-03-21  Vasily Tarasov  <tarasov@vasily.name>

	Added section titles

	Revising README-macos file.

2014-03-14  Sonam Mandal  <sonam.dp42@gmail.com>

	Modified archive.pl to take path to a README. Append hash file stats to this README.

2014-03-11  Vasily Tarasov  <tarasov@vasily.name>

	Compiling read_hashfile against the local libhashfile library

	Updating README to emphasize hash file parsing approaches

2014-03-07  Sonam Mandal  <sonam.dp42@gmail.com>

	Modified archiving script according to Vasily's comments.

2014-03-05  Vasily Tarasov  <tarasov@vasily.name>

	Mentioning libssl-dev and zlib1g-dev packages in configure script
	These are the names of the packages on Ubuntu/Debian/Mint.

	[TODO] add SIGTERM handler in the future

	Removing ezk for scans
	His home directory contains the scans of avatar, that are huge in size.

	Updating information on the libhashfile in the README

	Updating .gitignore

	Making copyrights, author lists, etc. uptodate.

	Adding libhashfile manpage to Makefile installation variables

	finilizing libhashfile man page

	hashfile_chunking_method() and hashfile_hashing_method() should return enums

	Removing hashfile_curfile_pathlen() function
	No code uses this function. It is redundant as hashfile_curfile_path()
	returns null-terminated string.

	Minor text changes in the tools man-pages.

2014-02-19  Vasily Tarasov  <tarasov@vasily.name>

	Reorganizing  libhashfile man page.

	Reviewing tools manpages.

2014-02-18  Vasily Tarasov  <tarasov@vasily.name>

	Updating hf-anonymizer man page.

	Updating TODO

	Consistify the usage method.

	Updatin hf-simdex man page.

	Using rbtree as a default indexing method in hf-simdex.

	Reviewing hf-stat man page.

	Adding man pages to the distribution

2014-02-17  Vasily Tarasov  <tarasov@vasily.name>

	Reviewing hf-stat man page.

	Adding the units to the compression ratio output in hf-stat.

	examples/ directory now makes it to the distribution

	Adding the description of examples/coreutils-8.2.hash file

	Another review of the fs-hasher man page.

2014-02-15  Vasily Tarasov  <tarasov@vasily.name>

	Minor changes to the trailer of all man pages.

	Another pass for fs-hasher man page.

	Adding README for examples/ subdirectory

2014-02-15  Sonam Mandal  <sonam.dp42@gmail.com>

	Further changes to libhashfile manpage

2014-02-15  Sagar Trehan  <sagartrehan@gmail.com>

	Added script for creating final trace archives.

2014-02-15  Sonam Mandal  <sonam.dp42@gmail.com>

	Updated libhashfile manpage.

2014-02-15  Vasily Tarasov  <tarasov@vasily.name>

	Polishing the examples read_hashfile program

2014-02-15  Sonam Mandal  <sonam.dp42@gmail.com>

	Modified hf-anonymizer.1 manpage.

	Modified hf-simdex.1 manpage, and minor changes to hf-stat.1 manpage.

2014-02-14  Sonam Mandal  <sonam.dp42@gmail.com>

	Updated man page for hf-stat.

2014-02-14  Vasily Tarasov  <tarasov@vasily.name>

	Major revision of the fs-hasher manpage.

	Chaning binary name from dedup to fs-hasher in the scan script.

2014-02-13  Sonam Mandal  <sonam.dp42@gmail.com>

	Added libhashfile manpage. Modified README and TOOD to reflect new names of tools.

	Modified scan-fsl-multi.sh to my directory, added current FSL users list.

2014-02-13  Vasily Tarasov  <tarasov@vasily.name>

	Cleaning scan scripts and changing cronjob path to Sonam's directory

2014-02-13  Sonam Mandal  <sonam.dp42@gmail.com>

	Renamed hfstat to hf-stat, anonymizer to hf-anonymizer, simdex to hf-simdex.

2014-02-13  Vasily Tarasov  <tarasov@vasily.name>

	Updating main .gitignore

	Adding Makefile for examples and .gitignore to override higher-level-directory .gitignore

	Adding coreutils hash file insted of current hashfile example.

	Further simlification of example read_hashfile.

2014-02-12  Sonam Mandal  <sonam.dp42@gmail.com>

	Added better formatting for chunk hash and file hash headers in hfstat.c

	Removed print of whole file hash for symlinks (chunks = 0)

	Removed liblog dependency from read_hashfile.c, simplified it further.

2014-02-12  Vasily Tarasov  <tarasov@vasily.name>

	Renaming example files

	Further tuning of hfstat output
	- Added show_totals option.
	- Do not print file name when printing hashes.
	- Removed the computation of total duration.
	- Organizing where empty lines should or should not be shown
	  in different modes when printing multiple files.

	Print usage in fs-hasher if no arguments are given

	Adding the installation of the man pages.

2014-02-11  Sonam Mandal  <sonam.dp42@gmail.com>

	Added a preliminary man page for the fs-hasher tool.

	Added a preliminary man page for the anonymizer tool.

	Added a preliminary man page for the simdex tool.

	Added a preliminary man page for the hfstat tool.

2014-02-10  Sonam Mandal  <sonam.dp42@gmail.com>

	Added examples directory with sample hash file and C program to print the chunk hashes for each file in it. Minor changes to hfstat.c

	hfstat: Added option to print whole file hash. Modified output format.

2014-02-10  Vasily Tarasov  <tarasov@vasily.name>

	Adding nice warning outputs if openssl or crypto libraries are missing.

2014-02-10  Vasily Tarasov  <tarasov@vasily.name>

	Adding libhashfile as a static library.
	And continue using autoconf and automake packages from CentOS 6.4 from now on:

	autoconf-2.63-5.1.el6.noarch
	automake-1.11.1-4.el6.noarch

2014-02-10  Vasily Tarasov  <tarasov@vasily.name>

	Canonicalize hashfile library: hashfilelib -> libhashfile
	Also, we will be using autoconf and automake packages from
	CentOS 6.4 from now on:

	autoconf-2.63-5.1.el6.noarch
	automake-1.11.1-4.el6.noarch

2014-02-09  Vasily Tarasov  <tarasov@vasily.name>

	blocks are 512B units and describe the amount of FS allocated space
	Clarifying in hfstat output and hashfilelib comments that blocks are units of
	512B and represent the amount of space allocated by a file system.

	Rewriting fs-hasher usage message.

	Updating TODO with few new entries and updating the stale ones

2014-02-05  Sonam Mandal  <sonam.dp42@gmail.com>

	Removed sql stuff from hfstat.c. Modified README. Removed hashconcat from Makefile.am.

2013-11-29  Vasily Tarasov  <tarasov@vasily.name>

	replacing bzero() by memset() because bzero() is deprecated

	replacing bzero() by memset() because bzero() is deprecated

	anonymizer: minor code clean-up

2013-11-29  Sagar Trehan  <strehan@cacheline.fsl.cs.sunysb.edu>

	Bug fix and redesigning of encrypt_path_componenet

	Addressed review comments from Vasily

2013-11-28  Sagar Trehan  <strehan@cacheline.fsl.cs.sunysb.edu>

	Removed use of PATH_TRUNCATE_SIZE from encrypt_path

2013-11-27  Vasily Tarasov  <tarasov@vasily.name>

	Fixing compilation on MacOS

	Updating e-mail address to the newly created mailing list

2013-11-27  Sagar Trehan  <strehan@cacheline.fsl.cs.sunysb.edu>

	Minor Bug fix

	Merge branch 'master' of git.fsl.cs.sunysb.edu:/scm/fslgit/dedup

	Rewrote encrypt_path to use strtok

2013-11-27  Erez Zadok  <ezk@cs.sunysb.edu>

	copyright updates

	expand SUNY name

	spell check strings+comments

	spell check text files

	remove trailing whitespace

2013-11-27  Vasily Tarasov  <tarasov@vasily.name>

	Making sure that -Wall does not produce warnings

	anonymizer: make us of isalnum() and similar functions
	and other minor clean-up.

	anonymizer: encrypt_path() does not set errno, so liblog_logen() cannot be used report errors
	Using liblog_sloge() instead.

	anonymizer: changing the extension of decrypted file to ".deanon"

	anonymizer: adding static modifier to several global variables and one function

	anonymizer: making sure that the user-specified padding is of the proper length
	Also, updating some of the related messages.

	anonymizer: changing -e with options to -d without arguments

	Updating README file.

2013-11-26  Vasily Tarasov  <tarasov@vasily.name>

	Adding -u option to the usage message

	Delete old fshasher.c

	Renaming fshasher to fs-hasher.

	Populating AUTHORS file.

	Changing the package name to fs-hasher

	Populating ChangeLog

	Filled NEWS file with contents.

	Updating the version to 0.9.2

	Separating README and README.GENERATION

	Cleaning up the Makefile

	Updating copyright years in all source files.

	Adding Sagar to the author's list in anonymizer.

	Adding TODO.GENERATION and moving parts of TODO there.

	Updating .gitignore

	Adding hash file version 7, where the chunk size is 32bit.

2013-11-22  Sagar Trehan  <strehan@rockstar.fsl.cs.sunysb.edu>

	Addressed review comments

2013-11-18  Vasily Tarasov  <tarasov@vasily.name>

	Another round of review for anonymizer.

	Updating the usage message.

	Adding conditional compilation of anonymizer

	Removing commented rules from the old Makefile that are already used in the new one

	Fixing missprint in a conditional compilation

2013-11-12  Vasily Tarasov  <tarasov@vasily.name>

	Renaming the file cause it was misspelled

2013-11-12  Vasily Tarasov  <tarasov@vasily.name>

	Migrating to new autoconf and automake versions
	CentOS-6.4 packages:

	automake-1.11.1-4.el6.noarch
	autoconf-2.63-5.1.el6.noarch

2013-11-12  Sagar Trehan  <strehan@rockstar.fsl.cs.sunysb.edu>

	Addressed review comments

2013-11-08  Sagar Trehan  <strehan@rockstar.fsl.cs.sunysb.edu>

	Addressed review comments

	Added support for user defined output file name and padding

2013-10-26  Sagar Trehan  <strehan@rockstar.fsl.cs.sunysb.edu>

	Added support for file path encryption

2013-10-20  Sagar Trehan  <strehan@rockstar.fsl.cs.sunysb.edu>

	Anonomyzer, DES encryption for Chunk hashes

2013-07-09  Vasily Tarasov  <tarasov@vasily.name>

	Adding more files to .gitignore

2013-07-08  Vasily Tarasov  <tarasov@vasily.name>

	Adding an ability to skip hashes to simdex

	Another update to the usage string

	Updating usage string for fshasher with -b option

	Adding support for scanning block devices

2013-04-01  Vasily Tarasov  <tarasov@vasily.name>

	[TODO] adding a not on compression method in the header

2013-03-31  Vasily Tarasov  <tarasov@vasily.name>

	Making all lines in the compute_kernels.sh less than 80 lines long

2013-03-30  Vasily Tarasov  <tarasov@vasily.name>

	[scripts] Adding a header to the output file of the compute_kernels.sh

2013-03-29  Vasily Tarasov  <Vasily Tarasov>

	Adding scripts that compute dedup ratios for Linux kernels.

2013-03-28  Vasily Tarasov  <tarasov@vasily.name>

	Renaming dedup tool to fshasher
	dedup tool doesn't do any deduplication. It hashes the contents of a
	file system.

	[simdex] calculating dedup ratio both in chunks and bytes ratios

	[hashfilelib] Detect if tail was on or off when reporting chunk size
	Only relevant to fixed chunking.

	[hashfilelib] compute chunk size for fixed chunking
	For all chunks except the last one the size is fixed. The size of the
	tail can be computed based on the file size.

2013-03-27  Vasily Tarasov  <tarasov@vasily.name>

	Including stdlib.h so that NULL definition is included
	Fixes compilation on FC.

2013-03-26  Vasily Tarasov  <Vasily Tarasov>

	mysql -> mysqld in the README

	Adding simdex to the compilation process

2012-07-02  Vasily Tarasov  <tarasov@vasily.name>

	script changes that reflect current scanning infrastructure at filer

2012-06-11  Vasily Tarasov  <tarasov@vasily.name>

	Adding gary and meg to scan list.

2012-05-30  Vasily Tarasov  <tarasov@vasily.name>

	Updated scripts to perform multi-chunksize scans on agora

2012-05-15  Vasily Tarasov  <tarasov@vasily.name>

	removed extra space in the hashfilelib output

	hfstat: close hashfile if we don't print per-file/per-hash statistics
	otherwise we can get "too many opened files" error when operating
	on many files.

2012-05-03  Vasily Tarasov  <tarasov@vasily.name>

	fixing usage string: -z, not -c is used to perform compression

2012-04-21  Vasily Tarasov  <tarasov@vasily.name>

	Removing redundant : in the sql export mode from hfstat output

2012-04-05  Vasily Tarasov  <tarasov@vasily.name>

	hashconcat tool: major rewrite
	rewriting hashconcat tool so that it verifies that hash
	files are allowed to be merged (same chunking/hashing methods).
	Adding hashconcat to the auto-tools building chain.

	hashfilelib: adding functions to get var/fxd chunking and  hashing params
	in preparation for hashconcat tool.

2012-04-02  Vasily Tarasov  <tarasov@vasily.name>

	hfstat: removing remaining direct accesses to handle fields
	- We keep 'file_id' file counter within the tool itself
	- same for 'chunk_seqnum'
	- Due to the way we import data to the database, we should
	  not support multiple files in the SQL export mode.

	Multiple fixes to hfstat
	- use of liblog for errors
	- use of hashlib instead of direct field access
	  (there are still a couple of places remaining)
	- -f, -h, -s are now mutual exclusive
	- in txt print mode filehash was computed incorrectly before
	- code is simplified in several places
	- usage updated

2012-04-01  Vasily Tarasov  <tarasov@vasily.name>

	Updated TODO
	hfstat and hashconcat TODOs

2012-03-31  Vasily Tarasov  <tarasov@vasily.name>

	Adding cratio import to dedupdb

	Add cratio output to SQL print mode

	More files generated by auto-tools
	Some more files that did not make it to the
	previous commit.

	Adding files that are generated by auto-tools
	This way, whoever check things out from the git can
	use configure script directly. A bit controversial that
	regeneratable files are kept in git, but looks like
	it is more convenient for the user.

2012-03-30  Vasily Tarasov  <tarasov@vasily.name>

	Updating dedupdb README

	Updating TODO

2012-03-27  Vasily Tarasov  <tarasov@vasily.name>

	zlib support for dedup tool
	If zlib is available on a system, zlib-def compression
	method will be available as an option.

	MD5 and SHA256 hard dependency removed
	Now, thanks to autotools and murmur support we can compile dedup
	without MD5/SHA256 available.

	Integrating murmur hash with dedup and hashfile library
	No need to change hashlib version in this case.

2012-03-26  Vasily Tarasov  <tarasov@vasily.name>

	Adding murmurhash
	Filtered sources from

	http://code.google.com/p/smhasher/

	Will allow us to compile without cryptolib installed.

2012-03-22  Vasily Tarasov  <tarasov@vasily.name>

	Adding the autotools support
	We need it because we have too many dependencies already:
	e.g, cryptolib, zlib.

	For now, only dedup and hfstat compilation is on.

2012-03-15  Vasily Tarasov  <tarasov@vasily.name>

	Merge branch 'master' of git.fsl.cs.sunysb.edu:/scm/fslgit/dedup

	hfstat prints compression ratio for every chunk

	generic support compression in dedup tool
	only "none" compression mode is supported.

	hashfile format v.6: chunk's compression ratio

2012-03-01  Vasily Tarasov  <tarasov@vasily.name>

	Fixing EBADF from nftw() because of an extra close()
	nftw was returning EBADF on some runs. It turned out that when we process
	symlinks, we still call close(fd) though no file was opened.

2012-01-20  Vasily Tarasov  <tarasov@vasily.name>

	Handling symlinks properly if they point to a non-existing entry
	We open/readlink a file before adding it to the hash file (so that we
	don't corrupt it on the error). If readlink/open fails, the error
	is ENOENT and -e flag is set, then we exit immideatelly with non-zero status.
	Otherwise, we try to process next files.

	Updating usage string.

	Adding a break statement forgotten in the previous commit.

2012-01-20  Vasily Tarasov  <tarasov@vasily.name>

	record all symlinks and exit on error flag
	1) record symlinks that point to anywhere,
	even to non-existent, special files, or directories.

	2) exit on error flag tells to exit if open
	returns ENOENT. It means somebody is changing
	the fs under us. We encountered it during MacOS
	Time machine scan.

2012-01-20  Vasily Tarasov  <tarasov@vasily.name>

	fail if the error happens during the read
	Specifically, if window_advance_throughput() call
	fails.

2012-01-19  Vasily Tarasov  <tarasov@vasily.name>

	Printing errno when open fails

2012-01-14  Erez Zadok  <ezk@cs.sunysb.edu>

	Compute correct maximum size of leftover buffer to vsnprintf.

	patch use-O2-by-default.patch

2012-01-14  Vasily Tarasov  <tarasov@vasily.name>

	Updating mutation REDME

2012-01-13  Amar Mundrakit  <amar.mudrankit@gmail.com>

	calculate cumulative numbers more efficiently

	run only required queris for synthesized datasets
	Markov analysis is omitted.

	drop some un-required tables to keep up the db space

	2 hacks in hash2fstree: coma replacement and symlink ignoring
	Both fixes are temporary.

	Adding README on fs-mutate

2012-01-12  Vasily Tarasov  <Vasily Tarasov>

	Missing new line in hfstat error output.

	Making hashconcat tool to use new interface to add symlink's target path

	Making dedup tool to add symlink's target paths using new interface

	Making sure that realpath is not used in hashlib for symlinks
	Same reason as in the previous commit: when operating on
	the system other than where the hash was recorded, target
	link won't not exits.

	Using strncpy() instead of memcpy() for root_path
	Otherwise we were overwriting something that we were not
	supposed to overwrite.

2012-01-12  Vasily Tarasov  <tarasov@vasily.name>

	Adding a hashconcat tool
	Very limited version, only supports VARIABLE,
	a lot values are hardcoded. Need to fix it after
	the deadline.

	Merge branch 'master' of git.fsl.cs.sunysb.edu:/scm/fslgit/dedup

2012-01-12  Vasily Tarasov  <tarasov@vasily.name>

	Moving realpath function call out of the hashfile library
	If a hashfile is created from other hashfiles (e.g., using
	hashconcat), then the root path most probably does not existing on the
	system where hashlib_open4write() is called. Consequently, realpath()
	on root path will fail.

	It should be application specific. So, I move realpath call from
	hashfile library to dedup tool. Hashconcat tool won't call realpath()
	on the other hand.

2012-01-12  Vasily Tarasov  <Vasily Tarasov>

	Merge branch 'master' of ssh://git.fsl.cs.sunysb.edu/scm/fslgit/dedup

	updating mysql_analysis to handle only subset of snapshots
	also adding executable bit to shell scripts.

2012-01-10  Amar Mudrankit  <amar.mudrankit@gmail.com>

	Fixing bugs in file modification: decreasing file size

	emitting unique chunk IDS differently
	While emitting out unique chunk IDs, we will start from dup_count 1
	and go upto last.  When these get exhausted, we will start emitting
	unique chunks with dup_count

	e increase the size of hash to be 64 bit
	Fs-mutate currently generates new IDs of 64 bit chunk,
	so we add this hack.

2012-01-09  Amar Mudrankit  <amar.mudrankit@gmail.com>

	Adding gnuplot files for plotting file depth and size.

	Updating README file with fresh queries.

2012-01-09  Vasily Tarasov  <tarasov@vasily.name>

	uncommenting hash_table array
	commited it out by an error previously

2012-01-09  Amar Mudrankit  <amar.mudrankit@gmail.com>

	In pass 2 of modification, modify the file carefully and not randomly

2012-01-09  Amar Mudrankit  <amar.mudrankit@gmail.com>

	Consider matrix entries in pass 2 of deletion and modification
	Consider matrix entries in pass 2 of deletion and modification
	which have expected count of files greater than number found.

	Also, fstree.c modified to ensure to give out correct slice.
	A case was noted where allocate_slice actually returned occupied
	entry.

2012-01-09  Amar Mudrankit  <amar.mudrankit@gmail.com>

	Plot the distribution of files as per dimension
	For dimensions:
	1. File Size in Chunks (LogScale)
	2. Depth in File System Tree
	3. File Extension (Bar graph)

	Make sure we do not add chunk_id with 0 in File system tree.
	Chunk ID 0 is invalid.

	Use RBTree while collecting distinct hashes of given duplicates.
	Current linear search sucks with larger snapshot size.

	3 bug fixes to hash2fstree
	1. Root directory cannot be created with name '0' as it
	   puts first 64 bits to be 0, marking entry free for
	   allocaation.
	2. Initializing prev chunk pointer to NULL.
	3. Saving the number of files, hashes and hash_size  in fstree.

	gnuplot scripts produce graphs of a more suitable size

	Do not reference chunk distributions in pass 2
	(when selecting files for deletion and modification).

2012-01-09  Amar Mudrankit  <amar.mudrankit@gmail.com>

	emit chunks with more than dups based on the distribution
	For chunks with duplicate counts greater than 2, we emit them
	based on the distribution of chunks in new files and modified
	files.

	Also, making sure that we are not duplicating same unique chunk
	IDs.

2011-12-30  Amar Mudrankit  <amar.mudrankit@gmail.com>

	Make a pass 2 for file modification.
	We are liberal while selecting files for modification and the way we
	modify it.

	Consider partially processed matrix entries as well in pass 2 of deletion

2011-12-30  Vasily Tarasov  <tarasov@vasily.name>

	build_chunk_distribution() functionality splitted
	build_chunk_distribution() was previously used by both fstree-print
	and fstree-mutate tools. However, fstree-mutate should not change
	states of the files in fstree (but build_chunk_distribution() did it).
	Logically, changing file states is an independent step, so separating
	functionality approriately.

2011-12-30  Vasily Tarasov  <tarasov@vasily.name>

	Putting some globale variable in the right places
	hash_table is a global object used in chunk-distro.c,
	fsdistro.c, and /fstree-mutate.c, but initialized in chunk-distro.c,
	so put it there.

	fst_dup_chunk_distro is used only in chunk-distro.c, so make it static.

	processed_files is fstree-mutate specific, make it static and
	remove it where it is redundant.

2011-12-30  Amar Mudrankit  <amar.mudrankit@gmail.com>

	Collecting cumulative numbers across snapshots

	Collecting total number of chunks in a snapshot

	Shell and gnuplot scripts to plot the results.

	fstree-print utility is able to export to SQL
	Allows to load fstree files directly to the Database,
	as we do it with hash files.

	Use hash distribution of new/modifed and deleted hashes in mutation
	- extraction of hash distribution in sql
	- mutation using appropriate distribution

2011-12-30  Amar Mudrankit  <amar.mudrankit@gmail.com>

	find distribution of duplicates in fstree
	This functionality won't be needed after we can export fstree in SQL
	form.  But for now, let's keep it.

	fstree-mutate and fsdistro had part of this functionality already to perform
	mutation. Move functions from fstree-mutate and fsdistro to a separate file.

2011-12-29  Amar Mudrankit  <amar.mudrankit@gmail.com>

	pass 2 for deleted files
	Intra-snapshot duplicates mess up with files to be deleted or modified.
	We run a pass 2 for deleted files.

	Handling error in such a way that it does not interrupt the analysis process

	Renaming kernel-analysis directory to analysis directory
	Part of transition to more general scripts.

	Generalizing analysis scripts to process required datasets

2011-12-26  Amar Mudrankit  <amar.mudrankit@gmail.com>

	Additional indexes on path and for matrix queries
	Building index on 'path' for new and deleted files.  This speeds
	up the query of type "Deleted Files Re-created".

	Also, building indexes on matrix queries, which improves query
	time significantly.

2011-12-26  Amar Mudrankit  <amar.mudrankit@gmail.com>

	Use distribution of unique hashes
	For better accuracy, we try to find distribution of unique hashes and mutate
	according to distribution.

2011-12-22  Mandar Joshi  <mandar.sh.joshi@gmail.com>

	basic dm device from Mandar
	can be useful as an initial stackable block device.

2011-12-21  Vasily Tarasov  <tarasov@vasily.name>

	Adding Artul's and Binesh's implementation of computational dedup
	The other group's code did not look usable as a starting point.

	Adding Mandar's implementation of simpl dm-based dedup module
	The other group's code does not look appealing, so I'm not adding it to the
	repo.

2011-12-21  Richard Spillane  <necro351@gmail.com>

	Adding a libhashfile.so shared library target to Makefile

2011-12-21  Vasily Tarasov  <tarasov@vasily.name>

	Updating TODO with point on fs-mutate
	prepared as writing the paper

2011-12-10  Vasily Tarasov  <tarasov@vasily.name>

	adding analysis dir to the source
	currently contains only old analysis for bloomlib.

2011-12-08  Vasily Tarasov  <tarasov@vasily.name>

	adding hash2fstree to the .gitignore

	README updated to reflect recent changes.

	changing generate_profiles to generate_populate_profiles
	because these profiles are for fstree-populate, not mutate.

2011-12-08  vass  <vass@ubuntu1.(none)>

	permissions for dedupdb.sh changed to exec

2011-12-08  Amar Mudrankit  <amar.mudrankit@gmail.com>

	printing the number of files that we failed to delete or modify

	determine if files are modified by the hash, not the timestamp
	Better and reliable way to search modified files across snapshots.  We
	compare the hash of the file to detect if it is modified.

2011-12-08  Vasily Tarasov  <tarasov@vasily.name>

	using xor to comput the hash of the whole file
	from the hashes of the individual blocks.

2011-12-08  Amar Mudrankit  <amar.mudrankit@gmail.com>

	unique chunk count within added files support
	- in database
	- in mutate toll
	- in helping scripts.

2011-12-06  Vasily Tarasov  <tarasov@vasily.name>

	BUGFIX: printing the whole file hash on sql_print_ path

	adding the ability to calculated hash for the whole file in hfstat

	refactoring hfstat.c

2011-12-06  Amar Mudrankit  <amar.mudrankit@gmail.com>

	DEBUG_DEV is off by default in the Makefiles

2011-12-06  Vasily Tarasov  <tarasov@vasily.name>

	hash2fstree: truncating the file if it exist

	Adding -e option that creates empty fstree

	hash2fstree: setting file size in converted fstree properly
	plus removed redundant XXX

	hash2fstree tool added
	allows conversion of hash files to fstree objects

2011-12-05  Amar Mudrankit  <amar.mudrankit@gmail.com>

	intelligent handling of 2 duplicates while matchig same/decreased sizes
	Improving the mutation code by intelligent dealing of chunks with more than
	2 duplicates while matching same size and during decrease size.
	Also, fixed pointer bugs

	bugs during setting of the hashe for n/m files
	Fixing the bugs observed during setting the hashes for new /
	modified files and removing trailing whitespaces in fsdisro

	Conditional compilation of code to debug the deviation

	Ignore symbolic links during mysql analysis
	by considering only the records with target_path NULL.

2011-12-04  Vasily Tarasov  <tarasov@vasily.name>

	in an empty fstree root pointer might be NULL

	typecasting in assertion, compilation fails otherwise

	adding .gitignore file

2011-12-04  Amar Mudrankit  <amar.mudrankit@gmail.com>

	hashes common bw new/mod and deleted files: mutation code
	We take into account the hashes that are common between new or
	modified files across s1 to s2 and the deleted files across same pair
	of snapshots.

	hashes common bw new/mod and deleted files: database support
	We take into account the hashes that are common between new or
	modified files across s1 to s2 and the deleted files across same pair
	of snapshots.

	capture the number of time we were not able to mutate
	because appropriate entry was not found in the matrix.

	print hash distribution for hashes in snapshots db

	use 64bit chunk id in sythesize chunk function

	misc fixes to the db related code

	misc fixes to mutation code

	some state are valed but we don't need to print them

	extend name variable once again and create only files in certain states

	Kernel scripts used for testing kernels deduplication

	Implementing re-creation of deleted files
	Based on probability value of P(DN), some new files are created
	with the name same as that of previously deleted file.

	Adding FST_IGNORE state
	designate files that were delete and not recreated later.
	Introduced in order not to bother about actual
	deletion of files and chunks from the slabs.

	fixing asserion SLAB_BASE might not be allign by slice size

	don not create previosly deleted files in fscreate

	Actual file state modification code.
	Mark all files to be in states *_PREV and then change
	state as per input matrices.

	small fix in fscreate printf modifier

	adding previous state constants and related code to fstree

	Using modifed files matrix during mutation

	Finding out characteristics of modified files in a matrix form
	Characteristics about modified files in the snapshot are captured
	in matrix format, in order to identify them more accurately during
	mutate operation.  The matrix also contains dimensions about
	how to modify given set of files.

	fscreate should not create files in deleted state.

	fstree-mutate support for deleted files matrix

	Finding out characteristics of deleted files in a matrix
	Characteristics about deleted files in the snapshot are
	captured in matrix format, in order to identify them
	more accurately during mutate operation.

	get_file_state() and print_state() added to fstree functionality

	fstree-populate.h was forgotten in one of the earlier commits

	matrix extraction querries added to the db

	fstree-mutate support for matrix mutation
	vass: did not review this code. Will look into
	whole mutation process after all patches are applied.

	Error message added and larger name variable size in fscreate

	fstree-populate should fill hashsize and hashnumber in fstree

2011-12-04  Vasily Tarasov  <tarasov@vasily.name>

	extending fstree to store hash size and number of hashes

2011-12-04  Amar Mudrankit  <amar.mudrankit@gmail.com>

	Adding hashfile_hash_size() to hashfile library.

2011-12-03  Vasily Tarasov  <tarasov@vasily.name>

	walk_fstree function was working not properly
	walking recursion was implemented incorrectly.  Fixed.

2011-12-03  Amar Mudrankit  <amar.mudrankit@gmail.com>

	dedupdb should use extension as a string as well

	fscreate should also use file extension as a string

	Saving whole extension as a string instead of an enumeration
	And updating appropriate tools: fsscan, fstree-mutate, and fstree-print.

	adding the ability to populate fstree from hash files
	We want to fill chunk hashes in the fstree using the appropriate hash
	files.  fstree was initially created by fsscan, that saves files' MD5
	sums. So, we first preload all MD5's from an fstree in a rbtree. Then
	we iterate over all files in the hasfile, compute MD5 for each
	filename, and search for it in the rbtree.

	changing printf modifiers for filename in the tools
	because we extended filename's width to 64 bits.

	extending filename and dirname fields to 64 bits
	Not clear if we really need it, but let's do it for now.

	adding hashfile_curfile_pathlen function

2011-11-29  Vasily Tarasov  <tarasov@vasily.name>

	small scripts for extracting modif patterns

	TODO updated

2011-11-15  Vasily Tarasov  <tarasov@vasily.name>

	gnuplot 4.2 does not understand -p, only -persist
	and in the end of the command line, not in the beginnig.

	adding the name of the profile to the title of the plot

	scripts for plotting profiles.

2011-10-14  Amar Mudrankit  <amar.mudrankit@gmail.com>

	fsscan uses a 64bit digest of the filename
	Before, we were setting a file id to a pure counter. Now, we hash the
	file name with MD5 while fsscan and use 64 bit as a file id.

	ingore symbolic links in fsscan
	If fsscan encounters a symbolic link while scanning the tree,
	it skips it.  This fix makes sure that fsscan ignores
	symbolic links, non-regular files and continues scanning rest
	of the tree.

	fsscan saves modification time
	fsscan now saves the modification time value as well for the
	file and dir objects so that while fscreate we create
	immutatble files with same modification time as before.

	file state mutation in accordance with profile file
	This patch builds cumulative distribution of scaled probabilities
	(MOD_VAL = 10000) and mutates the file states as per this
	distribution

	using fixed seed for generating random buffer
	Making sure that fscreate generates same buffer while generating
	file system.  This is because EXOR operation with same chunk ID
	should create same contents to be able to deduplicate them.

	Calculating indexes to optimize the execution of the query.

2011-09-19  Amar Mudrankit  <amar.mudrankit@gmail.com>

	adding remaining sub-file level analysis, plus some optimizations.

2011-09-18  Vasily Tarasov  <tarasov@vasily.name>

	not printing root path prefix in sql export mode.

2011-09-17  Vasily Tarasov  <tarasov@vasily.name>

	fstree-populate.c review

	moving total_num_chunks out of distro struction
	it is the number of chunks in the fstree,
	it is not relevant to the distribution.

2011-09-17  Amar Mudrankit  <amar.mudrankit@gmail.com>

	sub-file level optimization: extract hashes that are relevant to the current id
	Also re-structured the queries and shell script to process file level analysis and
	chunk level analysis separately.

2011-09-17  Erez Zadok  <ezk@fsl.cs.sunysb.edu>

	MAP_ANONYMOUS is not defined on MacOS
	use MAN_ANON instead.

2011-09-17  Amar Mudrankit  <amar.mudrankit@gmail.com>

	moving fill_rwx to the fstree.c
	this function can be used by both fstree-populate and fsscan
	and is logically a part of fstree facilities.

	fstree-print shows total number of files modified/changed/new

	fstree-populate in accordance with a simple profile

2011-09-17  Vasily Tarasov  <tarasov@vasily.name>

	changing function names to reflect their meaning in fscreate

	making sure that infinite loop is impossible
	that's not the niciest solution, but will work for now.

2011-09-17  Amar Mudrankit  <amar.mudrankit@gmail.com>

	Synthesizing file contents using XOR with chunk ID

2011-09-15  Amar Mudrankit  <amar.mudrankit@gmail.com>

	fstree object support for number of bytes, files, and dirs
	fsscan populates these numbers now.

	Adding the ability to detect prepend/append/center for the file.

2011-09-10  Amar Mudrankit  <amar.mudrankit@gmail.com>

	adding debug option for dedupdb shell script
	allows to execute some operations with finer granularity to do some stuff side
	by side.

2011-09-09  Vasily Tarasov  <tarasov@vasily.name>

	Merge branch 'master' of ssh://git.fsl.cs.sunysb.edu/scm/fslgit/dedup

2011-09-09  Vasily Tarasov  <vass@white.(none)>

	Merge branch 'master' of ssh://git.fsl.cs.sunysb.edu/scm/fslgit/dedup

2011-09-09  Vasily Tarasov  <tarasov@vasily.name>

	pattern need to be ANDed with mask
	Otherwise, if pattern size (in bits) is larger than mask
	size, comparison won't be valid.

2011-09-07  Amar Mudrankit  <amar.mudrankit@gmail.com>

	Requests that calculates the number of zero chunks

	trim commands added and README updated

2011-09-06  Amar Mudrankit  <amar.mudrankit@gmail.com>

	README file for dedupdb

2011-09-05  Will Buik  <will@miats.com>

	Show slab usage in fstree-chk
	Shows the slab usage after verifying tree integrity in fstree-chk.

	memory allocation to avoid looking through all allocated slices
	Slice allocator now keeps track of a pointer to the first slice that might be
	free.  All slices before it are garenteed to be allocated, so the slice
	allocator does not need to bother checking them.  In most use cases this is
	sufficient to give constant time slice allocation.

	Buffered writes for fscreate
	File writes are now put into a 4MB buffer before beign written to the disk
	to reduce the number of write system calls per file in the fscreate program.
	The buffer is flushed whenever there is not enough space to add another
	chunk and after the last chunk in a file has been written to the buffer.

2011-09-05  Amar Mudrankit  <amar.mudrankit@gmail.com>

	dedupdb: faster querries, better interface in dedupdb.sh
	1) queries are made significantly faster through the usage of intermediate
	tables, joins and appropriate indexes

	2) dedupdb.sh supports multiple snapshots in loaddata and analyze.
	Additionaly helpfull functions were added.

2011-08-10  Vasily Tarasov  <tarasov@vasily.name>

	Merge branch 'master' of ssh://git.fsl.cs.sunysb.edu/scm/fslgit/dedup

	-O2 removed from the Makefile
	on my Ubuntu machine it breaks va_start and variable
	argument number functions.

	wrong check of whether the file is processable
	";" was in the end of if statement :(

2011-08-08  Vasily Tarasov  <tarasov@vasily.name>

	adding fstree-print tool

	do not assert on deleted files
	just ignore them.

	walk_tree -> walk_fstree
	and arguments changed as appropriate.

	Moving tree walking function to fstree.c

	state switching in fstree-mutate

	Separating walk tree logic from the operation to be done on each file
	walk_tree gets a pointer on to the function which will be called
	for every node in the tree.

	FT_ -> FTY prefix for file types
	we will use FST for file states later, so I want it to have same number of
	letters.

2011-08-02  Vasily Tarasov  <tarasov@vasily.name>

	Adding Copyrights before releasing code to EMC

2011-07-28  Vasily Tarasov  <tarasov@vasily.name>

	shorter strcmp() usage

2011-07-28  Will Buik  <will@miats.com>

	Prunes duplicated functionality in fscreate.c and fstree-populate.c
	his patch prunes the duplicated and now unnecessary functionality in
	fscreate.c and fstree-populate.c since the tools were split.  The
	fstree-populate tool now only populates and strips chunks from a fstree.
	The fscreate.c tool only creates file systems.

2011-07-28  Vasily Tarasov  <tarasov@vasily.name>

	fstreechk -> fstree-chk rename
	as part of the the new naming conventions.

	split fsdatagen in two tools: fscreate and fstree-populate
	currently fscreate and fstree-populate are just copies of original fsdatagen

	fstree-update -> fstree-mutate
	rename as part of new naming conventions.

2011-07-28  Will Buik  <will@miats.com>

	Update fstree toolchain to read from stdin and write to stdout
	Updates all four fstree tools to read trees from stdin if the file name
	is "-" and write trees to stdout if the file name is "-".  This allows
	the tools to be piped into one another.

2011-07-28  Vasily Tarasov  <tarasov@vasily.name>

	checking that chunk size is not zero in the checker
	in case if file size is 0, no chunks would be in the list at all.

2011-07-28  Will Buik  <will@miats.com>

	order of fields in log_chunk changed
	The first four bytes of an in use log_chunk could be zero, causing the slice
	allocator to overwrite memory.  Swapped the offset and size fields in the
	log_chunk structure since size should never be zero.

	This is a temporary hack untill we use bitarray in the allocator.

2011-07-28  Will Buik  <will@miats.com>

	chunk should be allocated from the chunk slab
	Not from the dir slab, how it was mistakenly done earlier.

2011-07-28  Vasily Tarasov  <tarasov@vasily.name>

	updating clean target in Makefile

2011-07-28  Will Buik  <will@miats.com>

	chunk verification support for fstree checking facilities
	The fstree integrity checker now verifies that the log_chunk lists for all files
	are valid if they exist.  Verifies all pointers are in the chunk slab, checks
	for cycles, makes sure the sum of chunk sizes matches the file size, and
	verifies that offset of each chunk is valid.

2011-07-27  Vasily Tarasov  <tarasov@vasily.name>

	TODO updated

2011-07-27  Will Buik  <will@miats.com>

	simple fstree updater
	a demonstration of how to update fstree. In this case
	files are added to a directories with 2% probability.

2011-07-27  Vasily Tarasov  <tarasov@vasily.name>

	synthesize_dirname() added
	by the analogy with synthesize_filename()

2011-07-27  Vasily Tarasov  <tarasov@vasily.name>

	set physical chunk id to the random value
	it was forgotten before.

	Notice, that because of the tails,  it is possible
	to have chunks with same phys_id, but different size.
	will be fixed later.

2011-07-27  Vasily Tarasov  <tarasov@vasily.name>

	constants to designate fsdatagen actions

2011-07-27  Will Buik  <will@miats.com>

	data generation tool
	this tool allows to:
	1) populate fstree with chunks
	2) delete all chunks from fstree
	3) create a file system from fstree. In this case simple
	   filename and chunk contents generation schemes are used.

	fstree checker
	tool that uses checking facitlities to check fstree files for
	potential problems.

2011-07-26  Will Buik  <will@miats.com>

	integrity checking facilities for fstrees
	simple integrity checker for fstrees to make it easier to find bugs once we
	start manipulating the data. The code checks that all the pointers are valid,
	there are no loops in the tree, parent pointers are correct, and that the number
	of child files and directories are correct for each parent directory.

	give files/dirs unique names with respect to their parents
	required for simpler fs tree generation in the future.

2011-07-26  Vasily Tarasov  <tarasov@vasily.name>

	reviewing fsscan code
	minor fixes, that should not change the logic.
	error handling changed to more strict version, where
	we exit more often.

	moving a comment withing the condition statement
	it belongs there.

	usage parameter added to fsscan
	and related changes in the style.

	Moving memory-management definitions down in the header file

	Adding CFLAGS variable to Makefile

	make sure that slice's _end_ is not beyond the mmaped region
	it was possible that slice's start is in the mmaped region,
	while slice's end is already out of it. Fixed.

	calling destroy_fstree instead of cleanup_fstree
	cleanup_fstree was renamed to destroy_fstree

	reviewing fstree serialization code
	minor changes.

	reviewing fstree allocator code
	minor changes.

	size_t => uint64_t where logical

	reviewing slab allocator code
	minor changes in formatting.

	slab_t => struct slab

2011-07-25  Vasily Tarasov  <tarasov@vasily.name>

	fs_tree -> fstree for data type and -> fst for variable name
	1) fstree looks nicer
	2) it is not good to call variable type and variable identically

	Normalizing comments
	and removing some redundant empty lines.

	large_write() and large_read() should be static

	save_fs_tree() does not save root_directory to the file
	The save_fs_tree does not copy the root_directory pointer of the
	fs_tree into the fs_tree file header before it writes to the disk.

	undefined size_t breakes compilation
	If <stdlib.h> is not included, size_t is not defined on
	some architecures.

	fixing Makefile target
	fstree can't be a target as we have fstree.c file
	in the source directory. Calling the target fstrees instead.
	Also, some spaces added.

2011-07-25  Will Buik  <will@miats.com>

	Initial implementation of fsscan tool
	Initial implementation of the fsscan tool.  Given an input folder -i it will
	scan it and store it in an fstree which is written to the output folder -o.
	Currently the tool sets all file and directory IDs to 1, and does not store the
	permissions of files and directories.

2011-07-25  Will Buik  <will@miats.com>

	Initial implmentation of fstree
	Initial implementation of fstrees.  Supports allocation and deallocation of
	generic slabs at specific points in memory, allocation and destruction of
	fstrees, files, dirs, chunks.  Current design facilitates serialization to/from
	a file, which is also implemented in this patch.

	Current limitations:
	- Slices stored in the slab must have non-zero first four bytes or they
	  are treated as unallocated.
	- The allocator for slices is inefficient since it scans
	  from the beginning of the slab for an empty slice.
	- The length_inuse of a slab is only increased when new slices are
	  allocated, it is never decreased when they are freed.  As a result,
	  fstrees will never shrink in size even if all their contents are
	  deleted.

2011-07-19  Vasily Tarasov  <tarasov@vasily.name>

	fs tree for duplicated data generation
	original data structures. might change in the future.

2011-07-18  Vasily Tarasov  <vass@white.(none)>

	Merge branch 'master' of ssh://git.fsl.cs.sunysb.edu/scm/fslgit/dedup

2011-07-15  Vasily Tarasov  <tarasov@vasily.name>

	Updating TODO

2011-07-14  Will Buik  <will@miats.com>

	show_internal/external_symlinks should only search in one snapshot
	Modified the procedures show_internal/external_symlinks in the DedupDB to only
	search for files within a single snapshot, instead of across all files in the
	database.

2011-07-14  Will Buik  <will@miats.com>

	snapshot delta statistics and additional maintenance procedures to dedupdb
	Updated calculate_delta_stats procedure to calculate aggregate stats on the
	snapshot delta such as count of added/deleted files, added/deleted chunks, and
	added/deleted unique chunks etc.

	Added two new maintenance procedures to trim a prefix off all file paths in a
	snapshot and to add a prefix to all file paths in a snapshot.

2011-07-14  Vasily Tarasov  <tarasov@vasily.name>

	all target in Makefile is core now
	We don't use anything then dedup and hfstat at the moment.
	To not see annoying warnings.

	-O2 optimization and corresponding compilation warning fixes
	Warnings that were produced by gcc on Ubuntu 10 and Solaris 10
	were fixed.

	Conditional compilation of SHA256
	Solaris's libcrypt does not support SHA256.
	SHA256_DIGEST_LENGTH constant is used to detect SHA256 support and perform
	conditional compilation.

	_match() functions need to return something to make compiler happy
	_match() functions are declared to return integer. But control never reaches
	the end of these functions. However, some compilers complain, so let's make them
	happy.

	Removing posix_madvise() because of POSIX_MADV_SEQUENTIAL
	POSIX_MADV_SEQUENTIAL is required on MacOS. MADV_SEQUENTIAL should be used
	instead on Solaris.  Linux is fine with any of two. Just remove this function as
	it is not that important: experiments showed that it does not increase
	performance drastically.

2011-07-14  Will Buik  <will@miats.com>

	Hardcode MAX_PATH_SIZE
	Since the length of PATH_MAX is platform dependent, it should not be used as a
	length constant in the hash file format.  It has been hard coded to 4096
	(PATH_MAX on the versions of Linux that most of the hash files have been written
	on so far).

2011-07-14  Vasily Tarasov  <tarasov@vasily.name>

	Removed _GNU_SOURCE definition
	We do not depend GNU extensions anymore.

2011-07-14  Will Buik  <will@miats.com>

	[PATCH 7/7] Removed extraneous includes from dedup.c
	Removed include sys/types.h, list.h, and rbtree.h.  Also modified
	makefile to no longer link dedup.c with rbtree.c.  List and rbtree
	are no longer needed by dedup.c but their includes were left behind.

	[PATCH 6/7] madvise -> posix_madvise
	madvise() is not supported on Solaris 10 if _XOPEN_SOURCE 500 is
	declared.  posix_madvise() must be used instead.

	[PATCH 5/7] Remove error.h and the error function
	error() is a GNU extension and had to be removed from hfstat.c.  It
	was replaced with perror/fprintf and exit.  Dedup.c and hashfilelib.c
	included also error.h but did not actually use it for anything.

	[PATCH 4/7] Link against dedup tool libcrypto instead of libssl
	The MD5 and SHA256 functions from libssl are actually in libcrypto.  On Linux
	linking libssl brings in all the libcrypto functions but on Solaris it causes a
	linker error.

	[PATCH 3/7] Compile hfstat and dedup tool with c99 and _XOPEN_SOURCE 600
	To use platform independent number format specifiers like PRIu64
	you must compile with -std=c99 and #declare _XOPEN_SOURCE 600.

	[PATCH 2/7] Removes dependency on FTW_ACTION_RETVAL
	Removes dependency on the FTW_ACTION_RETVAL flag.  This flag is a GNU extension
	not supported on Solaris or MacOS and makes the program unportable.

2011-07-14  Will Buik  <will@miats.com>

	[PATCH 1/7] Removes support for excluding directories
	The following 7 patches make the necessary changes to make dedup.c and hfstat.c
	portable to Solaris. The SHA256 code still must be commented out manually if the
	version of openssl on the target machine is too old to support it.  If it is too
	old, a link error will occur.

	Removes support for excluding directories since efficiently implemnting it
	requires nftw to support the FTW_ACTIONRETVAL flag.  This flag is a GNU
	extension not supported on Solaris or MacOSX and makes the program unportable.

2011-07-14  Will Buik  <will@miats.com>

	Patchs hfstat to escape file paths when exporting sql friendly files.
	Adds an sql_safe_print function to hfstat that is used to print file paths.  This
	escapes any special characters such as backslash, tab, newline, null, and CTRL-Z
	that can break format of the tab dilimited output file.

2011-07-14  Vasily Tarasov  <tarasov@vasily.name>

	show_symlinks and show_hardlinks procedures

	dedupdb4 -> dedupdb

2011-07-13  Vasily Tarasov  <vass@white.(none)>

	Merge branch 'master' of ssh://git.fsl.cs.sunysb.edu/scm/fslgit/dedup

2011-07-13  Vasily Tarasov  <tarasov@vasily.name>

	Added 'reload' command to dedupdb.sh script

	Adding version 5 of hashfile
	- counting total number of bytes in the main header
	- blocks number in the per-file header

	protection -> perm in the database

	Adding drop function to dedupdb.sh

	Renaming blocks to chunks in the dedupdb scripts.

2011-07-13  Will Buik  <will@miats.com>

	Scripts tham manage dedupdb
	1) create it, define the schema
	2) import from hashfile
	3) calculate statistics

2011-07-13  Vasily Tarasov  <tarasov@vasily.name>

	Chaging default scanning parameters for FSL

2011-07-12  Vasily Tarasov  <tarasov@vasily.name>

	Adding md5-48bit to the help message.

	Bug in hfstat.c: _link returns NULL if file is not a symlink.

2011-07-12  Will Buik  <will@miats.com>

	hfstat can now output mysql-friendly import files

2011-07-11  Vasily Tarasov  <tarasov@vasily.name>

	Merge branch 'master' of ssh://git.fsl.cs.stonybrook.edu/scm/fslgit/dedup

	Removing a bunch of redundant spaces.

	Adding a symlink counter.

2011-07-11  Will Buik  <will@miats.com>

	Adding the support of symlinks to v.4 hashfiles
	We now store the path to which symlink points to in
	a hashfile. It only happens if symlink is to a
	regular file.

2011-07-11  Vasily Tarasov  <tarasov@vasily.name>

	Adding sudo and & to the dedup invocation from cron

	Adding scripts for daily FSL runs

2011-07-08  Vasily Tarasov  <tarasov@vasily.name>

	Adding 48bit MD5 support.

	Updating comments for hashfile v.4 header

	Updating TODO list

2011-07-08  Will Buik  <will@miats.com>

	Adds support additional version 4 attributes to hfstat's display

	Adds device id, inode number, and number of hardlinks to the version 4 header file

2011-07-07  Will Buik  <will@miats.com>

	hfstat displays version 4 file statistics when reading version 4 hash files
	Updates hfstat to display uid, gid, protection bits (in octal), and a/m/ctime
	when it detects that it is reading from a hash file of at least version 4.

2011-07-07  Will Buik  <will@miats.com>

	Hashfile lib now stores additional statistics on files
	Adds hashfile version 4 to the hashfile lib.  This version stores additional
	file statistics in the hashfile.  In addition to statistics stored by version
	3, version 4 stores file uid, gid, protection bits, atime, mtime, and ctime.
	Hashfile_add_file was modified to take a struct stat instead of a file size
	so it can store these additional statistics.

	Comment from Vasily: this is not final modification for verion 4 header
	file. We have to add inode number, number of hardlinks, fsid as well.

2011-07-07  Will Buik  <will@miats.com>

	Updates usage information to match new format and fixed null progname bug
	Updates usage information output, getopt no longer accepts -i, and fixed
	a bug where progname was never set causing the usage function to print
	"(null) ...".

	Fixed a bug in hfstat.c that caused hash output to be truncated
	The hash size in bits was divided by 8 twice instead of once.  Corrected the
	error and added a comment that print_chunk_info expects hash_size to be in
	bytes.

2011-06-28  Vasily Tarasov  <tarasov@vasily.name>

	64 bit offsets in hashfile library to support large hash files
	Got a bug when running on large data sets. When hash file becomes larger than
	2GB, off_t can overflow. Set off_t to 64 bit value.

	hfstat supports multiple files, totals are printed in the end
	hfstat can be given multiple hash files, it will output statistics per
	file and total statistics in the end.

	space missing in simdex.c
	just a space missing.

	hfstat outputs scan duration
	hfstat prints scan duration in seconds in addition to
	start and end times.

	Report throughput every 5 seconds
	dedup tool now reports MB/sec and file/sec instant and aggregate throughput
	every 5 seconds.

	Making rabin chunking the default one for variable chunking
	Rabin fingerprints is the most common chunking method. Make it default instead
	of simple chunking.

2011-06-27  Will Buik  <will@miats.com>

	bug in hashfilelib if no files were added
	Fixes a bug in do_add_file that caused the only_finalize parameter to be ignored
	if no files had been added to the hashfile yet.

2011-06-24  Will Buik  <will@miats.com>

	error in var chunking if buffer size is 1 byte less than max chunk size
	If the buffer is exactly one byte less than the maximum variable chunk size, the
	three variable chunk size calculators would return the maximum chunk size
	instead of indicating that there was not enough data.  This would cause an
	assertion to fail in process_file.

2011-06-24  Vasily Tarasov  <tarasov@vasily.name>

	Writing last file's header to hash file on close()
	We did not update last file's header on hashfile_close(),
	as a result chunk count for this file was 0 (as shown by hfstat).

2011-06-23  Vasily Tarasov  <tarasov@vasily.name>

	Updating TODO list

	Splitting process_file() function
	process_file() was too long. Some functionality was moved out to separate
	functions for the sake of readability.

	No hashes were written to the hashfile before
	hashfile_add_chunk() function's invocation was missing from process_file().
	As a result we were not writing any hashes. This patch fixes this.

	bsize -> csize
	Renamed bsize to csize, as it is more logical name. We define
	chunk sizes, not block sizes.

	Adding static modifier to simdex functions
	Adding static modifier to simdex functions.

2011-06-23  Will Buik  <will@miats.com>

	Adding simdex: tool for simple indexing
	All indexing code that was in dedup.c is now in simdex.c
	This tool runs on several hashfiles and counts duplicates.

2011-06-23  Vasily Tarasov  <tarasov@vasily.name>

	Writing hash file through hashfilelib in dedup tool
	Switches dedup tool to use hashfile library instead of writing the hash file
	manually.

	Write support in hashfilelib
	This patch adds write support to hashfile library.  One can create new file
	using open4write() function, add new files to this hash file using add_file()
	and add new chunks using add_chunk().

2011-06-22  Vasily Tarasov  <tarasov@vasily.name>

	Removed indexing stage from the code
	Indexing should be done by a separate tool. For large datasets
	we can use Database. For small - we need a small separate indexer.
	Will is going to add it soon.

2011-06-21  Will Buik  <will@miats.com>

	Mmap  falls back to unix read if mapping fails
	Changes the behavior of window_advance_mmap to fall back on window_advance_read
	if mapping fails for a file.  If mapping fails at any point in a file, the rest
	of the file is read using conventional unix read.  The next file will be read
	using mmap.

	One file that had this issue was /sys/devices/platform/uevent.  Mapping failed
	with the error NO SUCH DEVICE.

	Since window_advance_mmap now needs to call window_advance_read, the order of
	the mmap and read IO code was reversed to avoid needing a forward declaration of
	window_advance_read.  As a result the patch is a bit messy.

2011-06-21  Vasily Tarasov  <tarasov@vasily.name>

	mmap64 -> mmap
	Since we define _FILE_OFFSET_BITS to 64, we can skip 64 suffixes for
	appropriate libc functions. mmap is one of them.

	proper lseek return values handling and lseek64 removal
	We should use lseek(), not lseek64(), because we define
	_FILE_OFFSET_BITS to 64 bits.  This patch also checks lseek
	return values properly.

2011-06-21  Will Buik  <will@miats.com>

	Change process_file to issue warnigns for unreadable files (instead of exiting)
	process_file() now issues a LOG_WRN on file I/O errors instead of terminating
	the program with LOG_FTL.  If an error occurs, the file is closed and the hash
	output file is kept in a consistent state. This is done to avoid errors on
	special file systems that contain files that do not support reads/mmaps.

	Change chunk_size type from a uint64_t to an int64_t
	In process_file and all of the get_next_chunk functions chunk_size was changed
	from a uint64_t to an int64_t.  This is necessary because the get_next_chunk
	functions indicate errors by setting chunk_size to -1, which was impossible to
	check for since the variable was unsigned.

2011-06-21  Vasily Tarasov  <tarasov@vasily.name>

	Allow seek error for offset 0 in window_advance_read
	Changes the behavior of window_advance_read so that it tolerates seek error to
	offset zero. This allows small special files that appear to be regular files but
	do not support seeking to be read.

2011-06-21  Will Buik  <will@miats.com>

	Faster calculation of Rabin fingerprints
	This patch changes the way the polynomials for the rabin fingerprints are
	calculated.  Instead of calculating the entire polynomial for every byte of the
	chunk, a rolling hash is calculated instead.

	In addition, the dependence on the program bc was removed by adding a function
	to calculate the power of a number under an arbitrary modulus.  All the math is
	done in a 64 bit unsigned integer.  As long as PRIME * M * 255 is less than 2^64
	there will be no issues due to overflow.  An assertion verifies that this is the
	case before precalculating the values that the hash will need.

2011-06-21  Will Buik  <will@miats.com>

	Adds mmap as an alternative file I/O method.
	Use mmap() instead of read() for getting data from the file
	when -M command line switch is used.

2011-06-15  Vasily Tarasov  <tarasov@vasily.name>

	Not passing buffer size 0 to chunking function
	At the moment we might pass 0 size buffer to chunking function.  In this case
	each chunking method need to handle this situation separately. This patch puts
	appropriate code in the common part so that 0 size buffer is never passed to the
	chunking function.

	Removing wrong comment about cur_dedup->offset
	We reset cur_dedup->offset in process_file because
	we start to process a fresh file, not for
	any other reason.

2011-06-15  Will Buik  <will@miats.com>

	[6/6] Updates var_chnk_get_next_chunk to support the new file IO code
	[Patch 6/6] Updated var_chnk_get_next_chnk to no longer use global variables and
	to use the new generic file IO system instead of reading the data directly using
	unix read calls.

	[5/6] Updates fixed_chnk_get_next_chunk to support the new file IO code
	[Patch 5/6] Updated fixed_chnk_get_next_chnk to no longer use global variables
	and to use the new generic file IO system instead of reading the data directly
	using unix read calls.

	[4/6] Adds support for read I/O method
	Adds the framework for the generic file IO system and implements a
	version of it that uses unix read calls to fill the buffer.  The generic
	file IO creates a large buffer that slides over the file.  A function
	called window_advance that takes a file handle and an offset reads file
	data starting from the offset into global variables window_buffer,
	window_offset, and window_size.  Process_file passes this information to
	the get_next_chunk functions.

	[3/6] Updates process_file to support multiple dedup methods
	[Patch 3/6] The function now loops over all deduplication methods to first write
	and then finalize their fileheaders in the hash file.  To process multiple
	deduplication method's in parallel, the chunk processing loop uses a helper
	function get_next_dedup_method to select the deduplication method with the
	lowest file offset and process a chunk for that method.  This way, deduplication
	method's with different chunk sizes always access parts of the file that are
	close together, and whenever a chunking method reports that it needs more data,
	it is always safe to advance the file window (of the new IO system described in
	patch 4/6).

2011-06-15  Will Buik  <will@miats.com>

	[2/6] -F option for handling several dedup methods; hashfile_fd is now per dedup method
	[Patch 2/6] A new command line option -F takes a path to a configuration file
	that holds a list of deduplication methods to run simultaneously.  Each line of
	this file specifies the same command line arguments that specify a single
	deduplication method on when invoked by the command line.  Blank lines and lines
	starting with '#' are ignored.

	The main function was split up to make it smaller and to reuse the option
	processing code for deduplication methods read from the configuration file.

2011-06-13  Will Buik  <will@miats.com>

	[1/6] Encapsulates global variables for deduplication in struct dedup_method
	The following patch set adds support for running several deduplication methods
	simultaneously.  All global variables specific to a single deduplication method
	(such as chunking, hashing, indexing, and output hashfile types and parameters)
	were encapsulated in a structure (Patches 1,2,3,5,6).  To support processing
	simultaneous deduplication methods a new generic file IO system was added to
	read larger chunks of the file into a shared buffer so that the chunking code
	did not have to do this for every deduplication method.  This system was generic
	so that support for alternative IO methods such as mmap can be added in the
	future (Patches 4,5,6).

	[Patch 1/6] In order to run multiple deduplication methods simultaneously, all
	global variables used to store parameters for the deduplication methods had to
	be encapsulated in a struct.  A struct dedup_methods stores these parameters.
	The code was updated to use this new structure instead of global variables.

2011-06-09  Vasily Tarasov  <tarasov@vasily.name>

	Importing sources from CVS
	Dedup-related sources that we have in CVS as of now.
